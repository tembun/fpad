************************************
*   Compilation And Installation   *
************************************

To compile fpad from its source, first install build dependencies. In Debian-based systems, they are:

 * g++ >= 5
 * libx11-dev and libxext-dev (for X11)
 * qtbase5-dev and libqt5x11extras5-dev (for Qt5)

In Arch-based systems, the required package are:

 * gcc (or gcc-multilib for multilib systems)
 * libx11 and libxext (for X11)
 * qt5-base and qt5-x11extras (for Qt5)

In Red Hat based systems like Fedora:

 * gcc-c++
 * libX11-devel
 * libXext-devel
 * qt5-qtx11extras-devel
 * qt5-qtbase-devel

And, finally, in OpenSUSE:

 * gcc-c++
 * libX11-devel
 * libXext-devel
 * libqt5-qtx11extras-devel
 * libqt5-qtbase-devel


With cmake
==========
Then, open a terminal inside this folder and issue the following commands:

	mkdir build && cd build
	cmake ..
	make
	sudo make install

With qmake
==========
If you prefer qmake, use these commands instead:

	qmake && make
	sudo make install

You might need to put the full path of qmake in the first command and also the full path of Qt5's "lrelease" binary in 'src/fpad.pro' (only one place). After a qmake compilation, you could clean the source directory with this command:

	make distclean

*******************************
*   Compilation without X11   *
*******************************

If, for whatever reason, you do not want the X11 support, you could first turn on the option "WITHOUT_X11" with cmake:

	cmake .. -DWITHOUT_X11=ON

Or, if you use qmake:

	qmake WITHOUT_X11=YES

The result will have all features except for virtual desktop awareness and tab DND.

Please also note that, on Linux, fpad works under Wayland and you do not need to disable its X11 support for that.

Compilation on Haiku OS or macOS does not require "WITHOUT_X11" either.
